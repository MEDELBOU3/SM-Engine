
:root {
    /* =====================================================================
       CORE THEME COLORS (GLOBAL APPLICATION PALETTE)
       Adjust these to match your application's overall design system.
       ===================================================================== */
    --primary-dark: #1e1e1e; /* Main background for editor panels, keyframe area */
    --secondary-dark: #2a2a2a; /* Background for headers, sidebars, controls, timeline scale */
    --tertiary-dark: #3c3c3c; /* For input fields, subtle UI elements */
    --border-color: #4b4b4b; /* General UI border color */
    --text-primary: #e0e0e0; /* Main text color, high contrast */
    --text-secondary: #bbb; /* Secondary text, labels, slightly less contrast */
    --text-muted: #999; /* Faded text, placeholders, status messages */

    /* =====================================================================
       ACCENT COLORS (FOR INTERACTIVE ELEMENTS, HIGHLIGHTS, STATUS)
       Define consistent accent colors here.
       ===================================================================== */
    --accent-blue: #007acc; /* Primary interactive/highlight blue (e.g., VS Code blue) */
    --accent-green: #28a745; /* Success/Play action green */
    --accent-red: #dc3545; /* Danger/Error/Stop action red */
    --accent-yellow: #ffc107; /* Warning/Keyframe default yellow */
    --accent-orange: #fd7e14; /* Alternative accent, used for selected keyframe */
    --accent-purple: #6f42c1; /* Example additional accent */

    /* =====================================================================
       SHADOWS & OPACITIES
       Reusable values for shadows and transparent backgrounds.
       ===================================================================== */
    --shadow-base: rgba(0, 0, 0, 0.5); /* General shadow for depth */
    --shadow-inset: inset 0 1px 2px rgba(0,0,0,0.3); /* Subtle inner shadow */
    --hover-bg-opacity: 0.15; /* Default opacity for hover background effects */

    /* =====================================================================
       RGB CONVERSIONS (FOR RGBA USE, WHEN HEX ISN'T ENOUGH)
       Store RGB components for use in `rgba()` where opacity needs to vary.
       ===================================================================== */
    --text-primary-rgb: 224, 224, 224;
    --primary-dark-rgb: 30, 30, 30; /* Added for --timeline-keyframe-border */
    --accent-blue-rgb: 0, 122, 204;
    --accent-green-rgb: 40, 167, 69;
    --accent-red-rgb: 220, 53, 69;
    --accent-yellow-rgb: 255, 193, 7;
    --accent-orange-rgb: 253, 126, 20;


    /* =====================================================================
       TIMELINE SPECIFIC VARIABLES (Derived & Fine-tuned for timeline UI)
       These apply directly to timeline elements, using the core palette.
       ===================================================================== */
    --timeline-bg-track-area: var(--primary-dark);
    --timeline-scale-bg: var(--secondary-dark);
    --timeline-layer-item-hover-bg: rgba(var(--text-primary-rgb), 0.08);
    --timeline-layer-item-selected-bg: var(--accent-blue);
    --timeline-keyframe-color: var(--accent-yellow); /* Default keyframe color */
    --timeline-keyframe-border: rgba(var(--primary-dark-rgb), 0.7); /* Original #222 was darker than --primary-dark */
    --timeline-keyframe-hover-bg: var(--accent-orange); /* New variable based on original logic */
    --timeline-keyframe-selected-bg: var(--accent-blue); /* Original #00bfff, using accent-blue */
    --timeline-keyframe-selected-border: var(--accent-red); /* Original #00f, using accent-red for contrast */
    --timeline-keyframe-active-bg: var(--accent-green); /* Original #00ff99, using accent-green */
    --timeline-playhead-color: var(--accent-red); /* Playhead color */
    --timeline-grid-line-major: rgba(var(--text-primary-rgb), 0.25); /* Thicker grid lines for scale */
    --timeline-grid-line-minor: rgba(var(--text-primary-rgb), 0.1); /* Thinner grid lines */
    --timeline-grid-line-sub-minor: rgba(var(--text-primary-rgb), 0.05); /* Faintest grid lines */
    --timeline-track-row-odd-bg: #2c2c2c; /* Alternating track row backgrounds - now lighter */
    --timeline-track-row-even-bg: #222222; /* Alternating track row backgrounds - now darker */

    /* =====================================================================
       GENERAL BUTTON & INPUT STYLES (GLOBAL COMPONENTS)
       These styles apply to generic buttons and input fields across the app.
       ===================================================================== */
    --button-bg: var(--accent-blue);
    --button-hover-bg: color-mix(in srgb, var(--accent-blue), white 15%);
    --button-active-bg: color-mix(in srgb, var(--accent-blue), black 15%);
    --button-text-color: var(--text-primary);
    --input-bg: var(--tertiary-dark);
    --input-border: var(--border-color);
    --input-focus-border: var(--accent-blue);
    --button-active-shadow: 0 0 5px rgba(var(--accent-blue-rgb), 0.7);

    --timeline-track-row-odd-bg: #2c2c2c; /* Making this slightly lighter for better contrast */
    --timeline-track-row-even-bg: #222222; /* Making this slightly darker */
    --selected-track-random-color: transparent; /* New variable for random selected track color */
}


.tool-button.active {
    background-color: var(--button-bg);
    color: var(--button-text-color);
    box-shadow: var(--button-active-shadow);
}


/* =====================================================================
   1. TIMELINE PANEL CONTAINER (.timeline.resizable-content-panel)
   This is the main wrapper for the entire timeline UI.
   ===================================================================== */
/*.timeline.resizable-content-panel {
    position: absolute;
    bottom: 0;
    width: 55%; 
    left: 45.5%;
    transform: translateX(-46.5%); 
    height: 20%; 
    resize: none;
    min-height: 50px;

    background: var(--primary-dark); 
    border-top: 1px solid var(--border-color);
    z-index: 6;
    display: flex;
    flex-direction: column;
    box-sizing: border-box;
    overflow: hidden;
    color: var(--text-primary);
    font-family: 'Segoe UI', 'Arial', sans-serif;
    transition: height 0.3s ease, width 0.3s ease, left 0.3s ease, transform 0.3s ease;
}*/

.timeline.resizable-content-panel {
    position: absolute;
    bottom: 0;
    /* REMOVED: width, left, transform. These will be managed by `left` and `right` properties */
    left: var(--hierarchy-width-default); /* Aligned with editor-scene's left */
    right: var(--inspector-width-default); /* Default state: aligned with inspector's left */
    height: 20%; /* Initial height, JS will override and manage */
    resize: none;
    min-height: 50px;

    background: var(--primary-dark);
    border-top: 1px solid var(--border-color);
    z-index: 6;
    display: flex;
    flex-direction: column;
    box-sizing: border-box;
    overflow: hidden;
    color: var(--text-primary);
    font-family: 'Segoe UI', 'Arial', sans-serif;
    /* Adjust transitions to reflect `left` and `right` changes instead of `width/transform` */
    transition: height 0.3s ease, left 0.3s ease, right 0.3s ease;
}

/* Timeline Resize Handle 
.resize-handle-timeline {
    height: 4px;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    background-color: var(--border-color);
    cursor: row-resize;
    user-select: none;
    z-index: 3;
    transition: background-color 0.2s ease;
}

.resize-handle-timeline:hover {
    background-color: var(--accent-blue);
}

/* Timeline Global States (Hidden/Expanded) 
.timeline.hidden {
    height: 0 !important;
    opacity: 0;
    pointer-events: none;
}

.timeline.expanded {
    width: 80%; 
    left: 20%; 
    transform: translateX(0); 
   
}*/

/* Timeline Resize Handle - no change */
.resize-handle-timeline {
    height: 4px;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    background-color: var(--border-color);
    cursor: row-resize;
    user-select: none;
    z-index: 3;
    transition: background-color 0.2s ease;
}

.resize-handle-timeline:hover {
    background-color: var(--accent-blue);
}

/* Timeline Global States (Hidden/Expanded) */
.timeline.hidden {
    height: 0 !important;
    opacity: 0;
    pointer-events: none;
}

.timeline.expanded {
    /* When inspector is closed, timeline also expands to the right edge */
    right: 0;
    /* REMOVED: width, left, transform properties that define specific width values */
    /* If you still need specific width/left/transform for OTHER reasons, re-evaluate.
       But for expanding/contracting with inspector, `right: 0` is simpler. */
}


/* =====================================================================
   2. TIMELINE STATUS BAR (#stats-panel)
   Displays performance metrics (FPS, Objects, Triangles).
   ===================================================================== */
.status-bar {
    display: flex;
    gap: 12px; /* RESPECTED ORIGINAL MEASUREMENT */
    padding: 2px 8px; /* RESPECTED ORIGINAL MEASUREMENT */
    background: var(--secondary-dark);
    margin-bottom: 4px; /* RESPECTED ORIGINAL MEASUREMENT */
    font-size: 11px;
    color: var(--text-muted); /* More appropriate for status info */
    flex-shrink: 0;
    box-shadow: var(--shadow-inset);
    border-bottom: 1px solid var(--border-color);
    align-items: center; /* Vertically center content */
}

.status-bar div { /* Targets #fps, #objects, #triangles, #nanite-stats */
    white-space: nowrap;
}


/* =====================================================================
   3. TIMELINE CONTROLS BAR (.timeline-controls)
   Contains playback buttons, time display, and zoom controls.
   ===================================================================== */
.timeline-controls {
    display: flex;
    gap: 10px; /* RESPECTED ORIGINAL MEASUREMENT */
    align-items: center;
    padding: 4px 10px; /* Adjusted padding for better visual spacing */
    background: var(--secondary-dark); /* Using variable for consistency */
    border-bottom: 1px solid var(--border-color);
    flex-shrink: 0;
    user-select: none;
}

/* Group for main playback buttons to have a tighter internal gap */
.playback-controls-group {
    display: flex;
    gap: 5px; /* Tighter gap for playback buttons */
    align-items: center;
    /* The inline style `border-color: red;` will override here.
       If you want it controlled by CSS, remove the inline style from HTML. */
}

/* Optional visual separator between functional groups within timeline-controls */
.controls-separator {
    width: 1px;
    height: 20px; /* Visual height of the separator */
    background-color: var(--border-color);
    margin: 0 5px; /* Space around the separator */
    flex-shrink: 0;
}

/* Section for zoom, interpolation, and loop controls (pushed to the right) */
.secend-part {
  margin-left: auto; /* pushes it to the far right */
  display: flex;
  align-items: center;
  gap: 10px; /* adds spacing between elements inside */
}

/* Icons within timeline tool buttons */
.timeline-controls .tool-button .fas {
    font-size: 12px;
}

/* --- Inactive Button Colors --- */
/* Individual button color overrides for icon buttons (Inactive state) */
.timeline-controls #stop.tool-button { color: var(--accent-red); }
.timeline-controls #play.tool-button { color: var(--accent-green); }
.timeline-controls #pause.tool-button { color: var(--accent-orange); }
.timeline-controls #add-keyframe.tool-button { color: var(--accent-yellow); }
.timeline-controls #delete-keyframe.tool-button { color: var(--text-secondary); } /* Muted for delete */

/* New step/skip buttons - default inactive color (can be customized if desired) */
.timeline-controls #step-backward.tool-button,
.timeline-controls #step-forward.tool-button,
.timeline-controls #step-backward-sec.tool-button,
.timeline-controls #step-forward-sec.tool-button {
    color: var(--text-secondary); /* Default muted color for inactive playback controls */
}

/* --- Active Button Colors & Styles --- */
/* Play button active state */
.timeline-controls #play.tool-button.active {
    background-color: var(--accent-green);
    border: none;
    color: var(--text-primary);
    box-shadow: 0 0 5px rgba(var(--accent-green-rgb), 0.7);
}
/* Pause button active state */
.timeline-controls #pause.tool-button.active {
    background-color: var(--accent-orange);
    border: none;
    border-radius: 5px;
    color: var(--text-primary);
    box-shadow: 0 0 5px rgba(var(--accent-orange-rgb), 0.7);
}
/* Stop button active state */
.timeline-controls #stop.tool-button.active {
    background-color: var(--accent-red);
    border: none;
    border-radius: 5px;
    color: var(--text-primary);
    box-shadow: 0 0 5px rgba(var(--accent-red-rgb), 0.7);
}
/* Add Keyframe button active state */
.timeline-controls #add-keyframe.tool-button.active {
    background-color: var(--accent-yellow);
    border: none;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(var(--accent-yellow-rgb), 0.7);
    color: var(--primary-dark); /* Dark text on bright yellow for contrast */
}

/* New: Active states for step/skip buttons (grouping by direction) */
/* Backward steps active state */
.timeline-controls #step-backward.tool-button.active,
.timeline-controls #step-backward-sec.tool-button.active {
    background-color: var(--accent-red); /* Consistent with stop for backward actions */
    border: none;
    border-radius: 5px;
    color: var(--text-primary);
    box-shadow: 0 0 5px rgba(var(--accent-red-rgb), 0.7);
}
/* Forward steps active state */
.timeline-controls #step-forward.tool-button.active,
.timeline-controls #step-forward-sec.tool-button.active {
    background-color: var(--accent-green); /* Consistent with play for forward actions */
    border: none;
    border-radius: 5px;
    color: var(--text-primary);
    box-shadow: 0 0 5px rgba(var(--accent-green-rgb), 0.7);
}

/* Time Display */
#time-display {
  font-family: 'Fira Code', monospace;
  font-size: 14px; /* Keep original size */
  font-weight: 500; /* Slightly bolder for readability */
  color: var(--text-primary);
  
  padding: 4px 10px; /* Small tweak for better breathing room */
  min-width: 85px;   /* Keeps width stable when numbers change */
  text-align: center;
  flex-shrink: 0;

  background: linear-gradient(145deg, var(--tertiary-dark), #1e1e1e); /* Subtle depth */
  border: 1px solid var(--border-color);
  box-shadow: inset 0 1px 2px rgba(255, 255, 255, 0.05), 
              0 1px 3px rgba(0, 0, 0, 0.4); /* Adds depth */
  
  transition: all 0.2s ease-in-out;
}

#time-display:hover {
  background: linear-gradient(145deg, #222, var(--tertiary-dark));
  border-color: var(--accent-color, #3fa9f5);
  color: var(--accent-color, #3fa9f5);
}


/* Zoom Controls (+/- Buttons) */
.zoom-controls {
  display: flex;
  gap: 6px; /* small tweak for better spacing */
  align-items: center;
  flex-shrink: 0;
}

.zoom-controls .tool-button {
  background: var(--accent-blue);       /* consistent accent */
  color: var(--text-primary);           /* icon color */
  border: 1px solid var(--border-color);
  border-radius: 6px;                   /* smoother look */
  width: 28px;                          /* give icons breathing room */
  height: 28px;
  display: flex;                        /* center icon perfectly */
  align-items: center;
  justify-content: center;
  font-size: 14px;                      /* icon size */
  padding: 0;
  cursor: pointer;
  transition: all 0.2s ease-in-out;     /* smooth hover */
}

.zoom-controls .tool-button:hover {
  background: var(--accent-green);      /* highlight on hover */
  border-color: var(--accent-green);
  transform: scale(1.1);                /* subtle zoom-in effect */
  color: #fff;                          /* make icon pop */
}

.zoom-controls .tool-button:active {
  transform: scale(0.95);               /* tactile feedback */
}


/* =====================================================================
   4. TIMELINE MAIN BODY (.timeline-body)
   This is the flexible area containing the layers list and the track.
   ===================================================================== */
.timeline-body {
    display: flex;
    flex-grow: 1; /* Occupy remaining vertical space */
    overflow: hidden; /* Crucial to contain scrolling areas */
    position: relative;
    background: var(--timeline-bg-track-area);
}


/* =====================================================================
   5. TIMELINE LAYERS PANEL (.timeline-layers)
   The left sidebar listing animated objects.
   ===================================================================== */
/* Sidebar container for layers */
.timeline-layers {
    width: 20%; /* Original measurement */
    background: var(--secondary-dark);
    border-right: 1px solid var(--border-color);
    overflow-y: auto;
    flex-shrink: 0;
    user-select: none;
    box-sizing: border-box;
    padding-top: 5px; /* Top padding */
}

/* Layers list wrapper */
.layers-list {
    padding-bottom: 5px; /* Bottom spacing */
}

/* Each object/layer item */
.layer-item {
    align-items: center;
    padding: 6px 10px; /* Respect original measurement */
    color: var(--text-primary);
    font-size: 13px;
    cursor: pointer;
    border-bottom: 1px solid rgba(var(--text-primary-rgb), 0.05);
    border-left: 1px solid var(--text-muted);
    transition: background-color 0.15s ease, font-weight 0.15s ease;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.layer-item:hover {
    background-color: var(--accent-blue-rgb);
}


/* Selected object/layer */
.layer-item.selected {
    background-color: var(--timeline-layer-item-selected-bg);
    color: var(--button-text-color);
    font-weight: 600;
}

/* Object name span */
.object-name {
    flex: 1;
    overflow: hidden;
    text-overflow: ellipsis;
}

/* Expand/collapse icon */
.expand-icon {
    margin-right: 6px;
    font-size: 12px;
    width: 12px;
    text-align: center;
    transition: transform 0.2s ease;
}

/* Child layers container (hidden by default) */
.layer-children {
    padding-left: 18px; /* Indentation for hierarchy */
    display: none; /* JS toggles display */
}

/* Optional: nested items style */
.layer-children .layer-item {
    font-weight: normal;
    font-size: 12.5px;
}


/* =====================================================================
   6. TIMELINE TRACK AREA (.timeline-track)
   The main right area containing the ruler and keyframe content.
   ===================================================================== */
.timeline-track {
    flex-grow: 1; /* Occupy remaining horizontal space within .timeline-body */
    width: 80%; /* RESPECTED ORIGINAL MEASUREMENT (though flex-grow handles it) */
    height: 100%; /* RESPECTED ORIGINAL MEASUREMENT */
    position: relative;
    overflow-x: hidden; /* Hide overflow, JS handles `translateX` for scrolling */
    background: var(--timeline-bg-track-area);
    cursor: grab;
    display: flex;
    flex-direction: column; /* Stack ruler and content vertically */
}

.timeline-track:active {
    cursor: grabbing;
}


/* =====================================================================
   7. TIMELINE RULER (.timeline-scale)
   The time-scale displayed at the top of the track area.
===================================================================== */
 
.timeline-scale {
    position: relative;
    height: 24px; /* RESPECTED ORIGINAL MEASUREMENT */
    background: var(--timeline-scale-bg);
    border-bottom: 1px solid var(--border-color);
    flex-shrink: 0;
    user-select: none;
    overflow: hidden; /* Hide overflow, JS handles `translateX` for scrolling */
    box-sizing: border-box;
}

.timeline-scale-marker {
    position: absolute;
    top: 0;
    height: 6px; /* Default height for sub-minor markers */
    width: 1px;
    background: var(--timeline-grid-line-sub-minor);
    transform: translateX(-50%); /* Center the 1px line */
}

.timeline-scale-marker.minor {
    height: 10px;
    background: var(--timeline-grid-line-minor);
}

.timeline-scale-marker.major {
    height: 100%; /* Full height for major lines */
    background: var(--timeline-grid-line-major);
}

.timeline-scale-label {
    position: absolute;
    top: 3px; /* Position labels below the top of the scale bar */
    left: 0;
    transform: translateX(-50%); /* Center text above marker */
    color: var(--text-secondary);
    font-size: 10px;
    font-family: 'Fira Code', monospace;
    pointer-events: none;
    white-space: nowrap;
}


.context-menu-timeline {
  position: absolute;
  background: #222;
  border: 1px solid #444;
  border-radius: 4px;
  padding: 4px 0;
  list-style: none;
  margin: 0;
  display: none;
  z-index: 2000;
  width: 130px;
  min-width: 130px;
  font-family: sans-serif;
}

.context-menu-timeline li {
  padding: 3px 6px;
  cursor: pointer;
  color: #ddd;
  font-size: 13px;
}

.context-menu-timeline li:hover {
  background: #444;
  color: #fff;
}

.context-menu-timeline .separator {
  height: 1px;
  background: #333;
  margin: 4px 0;
  pointer-events: none;
}

/* =====================================================================
   8. TIMELINE CONTENT (.timeline-content)
   The main area where the playhead and keyframe tracks reside.
   ===================================================================== */
#timeline-content { /* Targeting by ID as per your HTML */
    position: relative;
    flex-grow: 1; /* Occupy remaining height within .timeline-track */
    overflow: hidden;
    overflow: visible;
    background: var(--timeline-bg-track-area);
    /* width: 100%; height: 100%; -- Removed, flex-grow handles size, JS sets virtual width */
    transition: transform 0.1s ease-out; /* Only transform for pan, JS sets width */
    transform-origin: left;
}

.status-bar {
    position: relative;
    display: flex;
    align-items: center;
    gap: 20px;
    background: var(--secondary-dark);
    padding: 8px 15px;
    border-bottom: 1px solid #333;
}


.status-bar > div {
   font-size: 13px;
}

.timeline-view-tabs {
    margin-left: auto;
    display: flex;
    gap: 5px;
    position: relative;
}

.view-tab {
    background: none;
    border: none;
    color: white;
    padding: 4px 8px;
    cursor: pointer;
    font-size: 14px;
}

.view-tab.active {
    border-bottom: 2px solid #0476bd;
    background-color: rgba(1, 107, 177, 0.5);
    font-weight: bold;
}

/* Anchor button */
#statsToggle {
    position: relative;
    z-index: 1000; /* keep above other UI */
}

.submenu-content, .animation-library{
    display: none;
    position: absolute;
    top: 100%;
    z-index: 999;
    left: 0;
    background: rgba(20, 20, 20, 0.98);
    color: #fff;
    min-width: 220px;
    border-radius: 8px;
    padding: 12px;
    margin-top: 8px;
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.5);
    border: 1px solid rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
}

.submenu-content div, .animation-library div {
    padding: 8px 10px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.08);
    font-size: 13px;
    border-radius: 4px;
    transition: background 0.2s;
}

.submenu-content div:hover, .animation-library div:hover{
    background: rgba(255, 255, 255, 0.05);
}

.submenu-content div:last-child, .animation-library div:last-child{
    border-bottom: none;
}

/* Arrow indicator for dropdown */
.submenu-content::before, .animation-library::before {
    content: '';
    position: absolute;
    top: -6px;
    left: 20px;
    width: 12px;
    height: 12px;
    background: rgba(20, 20, 20, 0.98);
    border-left: 1px solid rgba(255, 255, 255, 0.1);
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    transform: rotate(45deg);
}

.animation-bar {
    position: absolute;
    top: 4px;
    height: 14px;
    background: linear-gradient(90deg, #5a99ff, #2a6cff);
    border-radius: 3px;
    opacity: 0.8;
}

/* =====================================================================
   9. PLAYHEAD (#playhead)
   The vertical line indicating current time.
===================================================================== */
#playhead { /* Targeting by ID as per your HTML */
    position: absolute;
    top: 0;
    height: 100%; /* Stretch full height of timeline-content */
    width: 2px;
    background-color: var(--timeline-playhead-color);
    z-index: 100;
    transform: translateX(-50%); /* Center the 2px line */
    pointer-events: all; /* Make it clickable for dragging */
    cursor: ew-resize;
    transition: left 0.05s linear;
}

#playhead::after { /* The small triangle/head for the playhead */
    content: '';
    position: absolute;
    top: -12px; /* Position above the timeline-scale */
    left: -7px;
    width: 0;
    height: 0;
    border-left: 7px solid transparent;
    border-right: 7px solid transparent;
    border-top: 10px solid var(--timeline-playhead-color);
    transform: translateY(12px); /* Correctly position it at the top of the track */
    box-shadow: 0 1px 3px var(--shadow-base);
}

.timeline-track-row.bone-track {
    background-color: rgba(60, 90, 180, 0.3); /* A distinct color for bone tracks */
    margin-left: 20px; /* Indent bone tracks */
    border-left: 2px solid #5a8cff;
}

.keyframe.bone-keyframe {
    background-color: #5a8cff; /* A different color for bone keyframes */
    transform: translateY(-50%) rotate(45deg) scale(0.8);
    border-radius: 2px;
}
/* =====================================================================
   10. KEYFRAMES CONTAINER (#keyframes-container)
   Holds all the individual track rows and keyframes.
   ===================================================================== */
#keyframes-container { /* Targeting by ID as per your HTML */
    position: absolute;
    top: 0;
    left: 0;
    height: 100%; /* Will be sized by JS to totalVirtualWidth, and match parent height */
    width: 100%; /* Will be dynamically sized by JS to totalVirtualWidth */
    overflow-y: auto; /* Enable vertical scrolling for track rows */
    background: transparent; /* Allow timeline-bg-track-area to show through */
    pointer-events: none; /* Allows interaction to pass through to track background for panning */
}

/* =====================================================================
   11. TRACK ROWS (.timeline-track-row)
   Individual horizontal lanes for each object's keyframes.
   ===================================================================== */
.timeline-track-row {
    position: relative;
    height: 30px;
    border-bottom: 1px solid var(--timeline-border, #333);
    /* Background color is now set directly via inline style in JavaScript */
}

.timeline-track-row.group-track {
    background-color: #282828;
}

/* Active channel track highlighting */
.timeline-track-row.active {
    background-color: rgba(90, 153, 255, 0.15);
}

/* Make summary keyframes on the main object track distinct */
.keyframe.summary-keyframe {
    background-color: #f0ad4e;
    width: 4px;
    border-radius: 1px;
    transform: translateX(-2px); /* Center the tick */
    pointer-events: none; /* Summary keyframes are not interactive */
}
/* svg overlay */
#keyframe-lines {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1;
  pointer-events: none; /* allow clicks through to keyframes */
  overflow: visible;
}

/* path styles */
.keyframe-path {
  fill: none;
  stroke-width: 2;
  stroke-linecap: round;
  stroke-linejoin: round;
  opacity: 0.95;
}


.timeline-track-row:nth-child(odd) {
    background: var(--timeline-track-row-odd-bg);
}

.timeline-track-row:nth-child(even) {
    background: var(--timeline-track-row-even-bg);
}



/* =====================================================================
   12. INDIVIDUAL KEYFRAME (.keyframe)
   The visual markers representing keyframe data points.
   ===================================================================== */
.keyframe {
    width: 12px; /* RESPECTED ORIGINAL MEASUREMENT */
    height: 12px; /* RESPECTED ORIGINAL MEASUREMENT */
    background-color: var(--timeline-keyframe-color);
    position: absolute;
    top: 50%; /* Center vertically within the track row */
    transform: translate(-50%, -50%) rotate(45deg); /* Center and rotate to diamond */
    border: 2px solid var(--timeline-keyframe-border); /* RESPECTED ORIGINAL MEASUREMENT, using variable */
    border-radius: 2px; /* Slight radius for a softer diamond */
    z-index: 50;
    pointer-events: auto; /* Make it clickable */
    cursor: pointer;
    box-sizing: border-box;
    transition: transform 0.1s ease, background-color 0.1s ease, border-color 0.1s ease;
}


.keyframe:hover {
    background-color: var(--timeline-keyframe-hover-bg); /* Original color was #ffdd33 */
    border-color: var(--accent-yellow);
    transform: translate(-50%, -50%) rotate(45deg) scale(1.1);
}

.keyframe.selected {
    background-color: var(--timeline-keyframe-selected-bg); /* Original #00bfff, using accent-blue */
    border-color: var(--timeline-keyframe-selected-border); /* Original #00f, using accent-red */
    box-shadow: 0 0 5px rgba(var(--accent-blue-rgb), 0.5); /* Stronger shadow for selection */
    z-index: 60;
    transform: translate(-50%, -50%) rotate(45deg) scale(1.15);
}

.keyframe.selected:hover {
    background-color: color-mix(in srgb, var(--timeline-keyframe-selected-bg), white 15%); /* Lighter tint on hover if already selected */
    border-color: color-mix(in srgb, var(--timeline-keyframe-selected-border), white 15%);
    /* Keep same transform, or slightly more subtle, so it doesn't jump too much from selected state */
}

/* Track row for the selected object (good as is) *
.timeline-track-row.selected-object-track {
    /*background-color: color-mix(in srgb, var(--timeline-layer-item-selected-bg), black 50%); *
    background-color: var(--selected-track-random-color);
}*/ 

.timeline-track-row.selected-object-track {
    outline: 1.5px solid rgba(100, 150, 255, 0.4); /* Soft blue outline */
    outline-offset: -1px;
}

.timeline-track-line {
    position: absolute;
    height: 2px; /* Thickness of the line */
    top: calc(50% - 1px); /* Centers the line vertically within the track row */
    z-index: 1; /* Ensures lines are behind keyframes */
    pointer-events: none; /* Prevents lines from blocking keyframe clicks */
    background-color: transparent; /* Default transparent */
    transition: all 0.1s ease-out; /* Smooth transition for line style changes */
}

/* Specific styles for different interpolation types */
.line-linear {
    background-color: var(--color-green); /* Example: solid green line for linear */
}

.line-bezier {
    /* For true bezier curves, you'd need SVG or Canvas.
       Here, we simulate with a slightly thicker/dashed line, or a custom pattern */
    border-top: 2px solid var(--color-orange); /* Example: orange solid line for bezier */
    height: 0px; /* Make border the line itself */
    /* Could also use background: linear-gradient() or radial-gradient() for a visual curve hint */
}

.line-constant {
    border-top: 2px dashed var(--color-red); /* Example: dashed red line for constant */
    height: 0px;
}

/* Interpolation Selector */
.interpolation-selector {
  display: flex;
  align-items: center;
  gap: 6px;
  flex-shrink: 0;
  font-size: 13px;
  color: var(--text-secondary);
}

.interpolation-selector label {
  font-weight: 500;
  color: var(--text-primary);
}

.interpolation-selector select {
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  background: var(--tertiary-dark);
  color: var(--text-primary);
  font-size: 13px;
  font-family: inherit;
  padding: 4px 8px;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
  padding-right: 24px; /* Space for custom arrow */
  background-image: url("data:image/svg+xml,%3Csvg fill='white' height='12' viewBox='0 0 24 24' width='12' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M7 10l5 5 5-5z'/%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: right 6px center;
  background-size: 12px;
}

.interpolation-selector select:hover {
  border-color: var(--accent-blue);
}

.interpolation-selector select:focus {
  outline: none;
  border-color: var(--accent-green);
  box-shadow: 0 0 0 2px rgba(63, 169, 245, 0.3);
}
/* Playback Range Controls */
.playback-range-controls {
  display: flex;
  align-items: center;
  gap: 8px; /* spacing between elements */
  flex-shrink: 0;
  font-size: 13px;
  color: var(--text-secondary);
}

.playback-range-controls label {
  font-weight: 500;
  color: var(--text-primary);
}

.playback-range-controls .time-input {
  width: 60px;                  /* compact but readable */
  padding: 4px 8px;
  font-size: 13px;
  font-family: 'Fira Code', monospace; /* consistent with time-display */
  color: var(--text-primary);
  background: var(--tertiary-dark);
  border: 1px solid var(--border-color);
  border-radius: 6px;           /* match zoom buttons */
  text-align: center;
  transition: all 0.2s ease-in-out;
}

.playback-range-controls .time-input:focus {
  outline: none;
  border-color: var(--accent-green);
  box-shadow: 0 0 0 2px rgba(63, 169, 245, 0.3);
}

.playback-range-controls .time-input:hover {
  border-color: var(--accent-blue);
  background: var(--tertiary-light);
}


/* Specific keyframe types (for visual differentiation, if implemented later) */
.keyframe.position-key { background-color: var(--accent-red); } /* Original #ff5555 */
.keyframe.rotation-key { background-color: var(--accent-green); } /* Original #55ff55 */
.keyframe.scale-key { background-color: var(--accent-blue); } /* Original #5555ff */

/* Playback Range Controls Container */
.playback-range-controls {
  display: flex;
  align-items: center;
  gap: 8px; /* Spacing between elements */
  flex-shrink: 0;
  font-size: 13px;
  color: var(--text-secondary);
  border-left: 1px solid var(--border-color); /* Add a separator visually */
  padding-left: 10px; /* Space from the separator */
}

.playback-range-controls label {
  font-weight: 500;
  color: var(--text-primary);
}

/* Loop Toggle Checkbox */
#loop-toggle {
    appearance: none; /* Hide default checkbox */
    -webkit-appearance: none;
    -moz-appearance: none;
    width: 20px;
    height: 12px;
    background-color: var(--tertiary-dark);
    border: 1px solid var(--border-color);
    border-radius: 6px; /* Pill shape */
    cursor: pointer;
    position: relative;
    transition: background-color 0.2s ease;
}
#loop-toggle::before { /* Inner 'switch' circle */
    content: '';
    position: absolute;
    top: 1px;
    left: 1px;
    width: 10px;
    height: 8px;
    background-color: var(--text-muted); /* Off state */
    border-radius: 50%;
    transition: transform 0.2s ease, background-color 0.2s ease;
}
#loop-toggle:checked {
    background-color: var(--accent-green); /* On state background */
    border-color: var(--accent-green);
}
#loop-toggle:checked::before {
    transform: translateX(8px); /* Move circle to right */
    background-color: var(--text-primary); /* On state circle color */
}


/* Time Input fields for loop start/end */
.playback-range-controls .time-input {
  width: 70px;                  /* Make it a bit wider for 00:00:000 */
  padding: 4px 6px;
  font-size: 13px;
  font-family: 'Fira Code', monospace; /* Consistent with time-display */
  color: var(--text-primary);
  background: var(--tertiary-dark);
  border: 1px solid var(--border-color);
  border-radius: 4px;           /* Slightly less round than zoom buttons */
  text-align: center;
  transition: all 0.2s ease-in-out;
}
.playback-range-controls .time-input:focus {
  outline: none;
  border-color: var(--accent-blue); /* Consistent focus highlight */
  box-shadow: 0 0 0 1px rgba(var(--accent-blue-rgb), 0.5);
}
.playback-range-controls .time-input:hover {
  border-color: var(--accent-blue);
}

/* Specific styling for the 'Set' buttons for start/end */
.playback-range-controls #set-loop-start,
.playback-range-controls #set-loop-end {
    background: var(--secondary-dark); /* More subtle background for these context buttons */
    border-color: var(--border-color);
    width: 24px; /* Smaller square button */
    height: 24px;
    padding: 0;
    font-size: 10px;
    color: var(--text-secondary);
}
.playback-range-controls #set-loop-start:hover,
.playback-range-controls #set-loop-end:hover {
    background: rgba(var(--text-primary-rgb), var(--hover-bg-opacity));
    border-color: var(--accent-blue);
    color: var(--accent-blue);
}
.playback-range-controls #set-loop-start:active,
.playback-range-controls #set-loop-end:active {
    background-color: rgba(var(--text-primary-rgb), var(--hover-bg-opacity) * 1.5);
    transform: translateY(1px);
    box-shadow: none;
}

/* Visual Loop Range Markers on the timeline (inside keyframe-lines SVG) */
.timeline-loop-start-handle,
.timeline-loop-end-handle {
    position: absolute;
    top: 0;
    width: 1px; /* The line itself */
    height: 100%; /* Spans full height of timeline-content */
    background-color: var(--accent-blue); /* Distinct loop range color */
    pointer-events: none; /* Initially non-interactive */
    z-index: 10; /* Above regular grid lines, below playhead */
}
/* Visual element representing the start handle head/triangle */
.timeline-loop-start-handle::before {
    content: '';
    position: absolute;
    top: -8px; /* Position above the track content */
    left: 0; /* Centered */
    transform: translateX(-50%) rotate(45deg); /* Diamond shape */
    width: 10px;
    height: 10px;
    background-color: var(--accent-blue);
    border: 1px solid rgba(var(--accent-blue-rgb), 0.7);
    z-index: 12;
    box-shadow: var(--shadow-base);
    pointer-events: auto; /* Make the handle itself interactive */
    cursor: ew-resize; /* Cursor for dragging */
}
/* Visual element representing the end handle head/triangle */
.timeline-loop-end-handle::before {
    content: '';
    position: absolute;
    top: -8px;
    left: 0; /* Centered */
    transform: translateX(-50%) rotate(45deg);
    width: 10px;
    height: 10px;
    background-color: var(--accent-blue);
    border: 1px solid rgba(var(--accent-blue-rgb), 0.7);
    z-index: 12;
    box-shadow: var(--shadow-base);
    pointer-events: auto; /* Make the handle itself interactive */
    cursor: ew-resize;
}

.loop-zone {
    position: absolute;
    top: 0;
    left: 0;            /* you can adjust dynamically via JS */
    height: 100%;        /* full height of timeline-content */
    background-color: rgba(0, 128, 255, 0.15); /* semi-transparent blue */
    border-left: 1px solid rgba(0, 128, 255, 0.5);
    border-right: 1px solid rgba(0, 128, 255, 0.5);
    pointer-events: none; /* allow clicks to pass through */
    display: none;        /* hide by default, show when loop enabled */
    z-index: 10;          /* behind markers but above timeline content */
}

/* Timeline markers container */
.timeline-markers-container {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  pointer-events: none; /* Allows clicks to pass through */
  z-index: 25;
  overflow: visible;
}

/* Individual timeline marker */
.timeline-marker {
  position: absolute;
  z-index: 20;
  top: 6px;
  width: 12px;
  height: calc(100% - 12px);
  transform: translateX(-50%);
  cursor: pointer;
  pointer-events: auto;
  display: flex;
  align-items: flex-start;
  justify-content: center;
  transition: transform 0.15s ease, opacity 0.15s ease;
}

/* Marker handle (draggable part) */
.timeline-marker .marker-handle {
  width: 12px;
  height: 12px;
  border-radius: 3px;
  margin-top: 4px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.25);
  border: 1px solid rgba(0, 0, 0, 0.25);
  background-color: #ff6f61; /* eye-catching color */
  transition: background-color 0.2s ease, transform 0.2s ease, box-shadow 0.2s ease;
}

/* Hover effect for better UX */
.timeline-marker .marker-handle:hover {
  background-color: #ff4c3b;
  transform: scale(1.2);
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.35);
}

/* Marker label (tooltip-like) */
.timeline-marker .marker-label {
  position: absolute;
  top: -24px;
  left: 50%;
  transform: translateX(-50%);
  padding: 3px 6px;
  font-size: 12px;
  white-space: nowrap;
  border-radius: 4px;
  pointer-events: none;
  background: rgba(0, 0, 0, 0.7);
  color: #fff;
  z-index: 30;
  opacity: 0;
  transition: opacity 0.2s ease, transform 0.2s ease;
}

/* Show label on hover */
.timeline-marker:hover .marker-label {
  opacity: 1;
  transform: translateX(-50%) translateY(-4px);
}

/* Dragging state */
.timeline-marker.dragging {
  opacity: 0.8;
  transform: translateX(-50%) scale(1.05);
}


/* =====================================================================
   13. ADDITIONAL TIMELINE COMPONENTS (Provided in original, not in HTML)
   These rules are kept for completeness, assuming they might be used
   in other parts of your UI or future HTML additions.
   ===================================================================== */
.timeline-fps {
    display: flex;
    align-items: center;
    gap: 4px;
    margin-left: 10px;
}
.timeline-fps select {
    background: var(--tertiary-dark);
    color: var(--text-primary);
    border: 1px solid var(--input-border);
    border-radius: 3px;
    padding: 2px 4px;
}
.timeline-header {
    padding: 4px;
    border-bottom: 1px solid var(--border-color);
    background: var(--secondary-dark);
}
.timeline-tracks-container { /* If you implement a separate container for tracks */
    position: absolute;
    top: 0;
    right: 0;
    width: 100%;
    height: 100%;
}
.timeline-footer {
    padding: 4px 8px;
    border-top: 1px solid var(--border-color);
    display: flex;
    justify-content: space-between;
    font-size: 11px;
    background: var(--secondary-dark);
    color: var(--text-muted);
}
.timeline-range {
    display: flex;
    align-items: center;
    gap: 6px;
}  

/* --- GRAPH EDITOR SPECIFIC STYLES --- */

#graph-editor-container { /* Targeting by ID for specific graph container */
    display: flex; /* Kept flex */
    flex-grow: 1; /* Crucial for vertical sizing within the .timeline.resizable-content-panel */
    width: 100%; /* Ensure it spans the full width */
    background: var(--primary-dark); /* Use theme variable */
    box-sizing: border-box; /* Include padding/border in element's total width/height */
    overflow: hidden; /* Hide anything that overflows the container */
    border-top: 1px solid var(--border-color); /* Visual separation from timeline controls */
    /* Add subtle inner shadow for depth */
    box-shadow: inset 0 0 8px rgba(0, 0, 0, 0.2); 
    color: var(--text-primary); /* Default text color for the container */
}

/* Graph Sidebar (Channel List) */
#graph-channels-list { /* Targeted by ID, as used in JS `document.getElementById` */
    width: 200px; /* Fixed width */
    flex-shrink: 0; /* Prevents shrinking */
    background: var(--secondary-dark); /* Use theme variable */
    border-right: 1px solid var(--border-color); /* Use theme variable for border */
    overflow-y: auto; /* Enable vertical scrolling */
    color: var(--text-primary); /* Ensure text is visible */
    box-sizing: border-box;
    display: flex; /* Make it a flex container */
    flex-direction: column; /* Stack header and items vertically */
}

/* NEW: Graph Sidebar Header */
.graph-sidebar-header {
    padding: 10px 12px;
    font-size: 14px;
    font-weight: 600;
    color: var(--text-primary);
    border-bottom: 1px solid var(--border-color);
    background: color-mix(in srgb, var(--secondary-dark), black 10%); /* Slightly darker header */
    flex-shrink: 0; /* Ensure header doesn't shrink */
    margin-bottom: 5px; /* Space between header and first channel item */
}


.graph-channel-item {
    padding: 8px 12px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 12px;
    white-space: nowrap; /* Prevent channel labels from wrapping */
    text-overflow: ellipsis; /* Truncate long labels */
    overflow: hidden;
    color: var(--text-secondary); /* Default text color for channel items */
    transition: background-color 0.15s ease, color 0.15s ease, transform 0.15s ease; /* Smooth transitions */
    border-left: 3px solid transparent; /* Placeholder for active state highlight */
}

.graph-channel-item:hover {
    background: var(--timeline-layer-item-hover-bg); /* Consistent themed hover */
    color: var(--text-primary); /* Make text brighter on hover */
}

.graph-channel-item.active {
    background: var(--accent-blue); /* Use accent color for active item */
    color: var(--text-primary); /* White text on blue background */
    font-weight: 600; /* Bolder for active state */
    border-left-color: var(--accent-green); /* Green border for active state (like selection indicator) */
    box-shadow: inset 3px 0 0 0 var(--accent-green); /* Visual cue on left side */
}

.graph-channel-color {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    flex-shrink: 0; /* Prevent color circle from shrinking */
    border: 1px solid rgba(0, 0, 0, 0.4); /* Subtle border for definition */
    box-shadow: inset 0 0 3px rgba(255,255,255,0.1); /* Inner glow for visual depth */
}

.graph-canvas {
    flex: 1; /* Takes remaining horizontal space */
    cursor: crosshair; /* Indicates interactive drawing area */
    display: block; /* Ensures it behaves correctly within flex */
    height: 100%; /* Full height of the container */
    box-sizing: border-box; /* Include padding/border in element's total width/height */
    /* No explicit width/height here; flex:1 handles it, and JS sets canvas.width/height attributes */
    background: var(--primary-dark); /* Fallback, JS fills it with a more specific #1a1a1a */
    border-left: 1px solid var(--border-color); /* Visual separation from sidebar */
    /* Optional: subtle rounded corners for the canvas itself */
    border-radius: 0 4px 4px 0; /* Top-left, Top-right, Bottom-right, Bottom-left */
}

.animation-list {
    max-height: 300px;
    overflow-y: auto;
    border: 1px solid #444;
    margin: 10px 0;
}
.animation-item {
    padding: 6px;
    cursor: pointer;
    border-bottom: 1px solid #444;
}
.animation-item:hover {
    background: #3a3a3a;
}
.animation-item.active {
    background: #5a99ff;
}
/* --- END GRAPH EDITOR SPECIFIC STYLES --- */




/* ==============================
   Curve Modifier Panel (Context Style)
   ============================== */

/* Curve Modifier Panel */
#curve-modifier-panel {
  display: none;
  position: absolute;
  top: 40px;
  right: 20px;
  width: 280px;
  min-width: 280px;
  max-width: 340px;
  height: 90vh;
  background: #2b2b2b;
  color: #f1f1f1;
  border: 1px solid #3c3c3c;
  box-shadow: 0 6px 20px rgba(0,0,0,0.4);
  font-family: "Segoe UI", sans-serif;
  font-size: 14px;
  z-index: 9999;
  animation: fadeIn 0.2s ease-out;
  overflow-y: auto;
}

#curve-modifier-panel.active {
  display: block;
  opacity: 1;
  pointer-events: auto;
}

#curve-modifier-panel .panel-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: #1f1f1f;
  padding: 8px 12px;
  border-bottom: 1px solid #444;
  border-radius: 8px 8px 0 0;
  cursor: move;
}

#curve-modifier-panel .panel-header h2 {
  font-size: 14px;
  margin: 0;
  color: #fff;
}

#curve-modifier-panel .close-btn {
  background: transparent;
  border: none;
  font-size: 16px;
  color: #aaa;
  cursor: pointer;
  transition: color 0.2s;
}

#curve-modifier-panel .close-btn:hover {
  color: #ff5555;
}

/* Sections */
#curve-modifier-panel .section {
  padding: 10px 14px;
  border-bottom: 1px solid #3c3c3c;
}

#curve-modifier-panel .section:last-child {
  border-bottom: none;
}

#curve-modifier-panel .section-title {
  font-size: 12px;
  font-weight: bold;
  text-transform: uppercase;
  margin-bottom: 6px;
  color: #b0b0b0;
}

/* Controls */
.control-group {
  margin-bottom: 10px;
}

.control-label {
  display: block;
  margin-bottom: 4px;
  font-size: 12px;
  color: #ccc;
}

select, input[type="range"] {
  width: 100%;
}

select {
  background: #3a3a3a;
  color: #eee;
  border: 1px solid #555;
  border-radius: 4px;
  padding: 4px 8px;
  font-size: 13px;
  cursor: pointer;
}

select:focus {
  outline: none;
  border-color: #666;
}

input[type="range"] {
  -webkit-appearance: none;
  appearance: none;
  height: 4px;
  background: #3a3a3a;
  border-radius: 2px;
  outline: none;
}

input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 14px;
  height: 14px;
  background: #5a9fd4;
  border-radius: 50%;
  cursor: pointer;
}

input[type="range"]::-moz-range-thumb {
  width: 14px;
  height: 14px;
  background: #5a9fd4;
  border-radius: 50%;
  cursor: pointer;
  border: none;
}

.slider-container {
  display: flex;
  align-items: center;
}

.slider-container input[type="range"] {
  flex: 1;
}

.slider-value {
  margin-left: 6px;
  font-size: 12px;
  color: #ccc;
  min-width: 40px;
  text-align: right;
}

/* Checkboxes */
.checkbox-group {
  display: flex;
  align-items: center;
  gap: 8px;
  margin-bottom: 8px;
}

.checkbox-group input[type="checkbox"] {
  width: 16px;
  height: 16px;
  cursor: pointer;
}

.checkbox-group label {
  font-size: 13px;
  color: #ccc;
  cursor: pointer;
}

/* Buttons */
.btn-group {
  display: flex;
  gap: 6px;
  flex-wrap: wrap;
}

.btnMd {
  flex: 1;
  padding: 6px 8px;
  border: none;
  border-radius: 4px;
  background: #3a3a3a;
  color: #eee;
  cursor: pointer;
  font-size: 13px;
  transition: background 0.2s;
}

.btnMd:hover {
  background: #4a4a4a;
}

.btnMd.full-width {
  width: 100%;
}

.btnMd.danger {
  background: #662222;
}

.btnMd.danger:hover {
  background: #993333;
}

/* Status indicator */
.status-indicator {
  display: flex;
  align-items: center;
  gap: 6px;
  padding: 8px 12px;
  background: #222;
  border-bottom: 1px solid #333;
}

.status-dot {
  width: 10px;
  height: 10px;
  border-radius: 50%;
  background: gray;
}

#status-dot.active {
  background: #4caf50;
}

#status-text {
  font-size: 12px;
  color: #aaa;
}

/* Info Box */
.info-box {
  padding: 10px 12px;
  font-size: 12px;
  background: #1a1a1a;
  color: #aaa;
  border-top: 1px solid #333;
  border-radius: 0 0 8px 8px;
}

.info-box strong {
  color: #ddd;
}

/* Toolbar (floating below viewport) */
#curve-toolbar {
  position: absolute;
  bottom: 40px;
  left: 50%;
  transform: translateX(-50%);
  background: #2b2b2b;
  border: 1px solid #3c3c3c;
  border-radius: 6px;
  padding: 6px 8px;
  display: none;
  gap: 6px;
  align-items: center;
  box-shadow: 0 4px 16px rgba(0,0,0,0.3);
}

.toolbar-btn {
  background: #3a3a3a;
  border: none;
  border-radius: 4px;
  padding: 4px 8px;
  color: #eee;
  cursor: pointer;
  font-size: 12px;
}

.toolbar-btn:hover {
  background: #4a4a4a;
}

.toolbar-separator {
  width: 1px;
  height: 20px;
  background: #555;
  margin: 0 4px;
}

/* Overlay instructions */
#instructions-overlay {
  position: absolute;
  bottom: 10px;
  left: 50%;
  transform: translateX(-50%);
  background: rgba(30,30,30,0.9);
  padding: 6px 12px;
  border-radius: 6px;
  color: #ddd;
  font-size: 12px;
  display: none;
}

/* Animations */
@keyframes fadeIn {
  from { opacity: 0; transform: scale(0.95); }
  to   { opacity: 1; transform: scale(1); }
}